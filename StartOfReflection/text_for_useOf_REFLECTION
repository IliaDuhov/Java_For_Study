Выделяют три типа рефлексивных задач: 
1.	Инспекция
2.	Использование
3.	Изменение
Инспекция - это возможность исследовать структуру объекта через его Class описание. 

ИПОЛЬЗОВАНИЕ  
В строке 15 мы получаем доступ к описанию класса А. Из этого описания в строке 17 мы получаем конструктор со строковым параметром, и вызываем его в строке 18, передавая строку в виде параметра. Результатом, в данном случае, будет ссылка типа Object, но для наших дальнейших экспериментов тип ссылки неважен, так как весь доступ осуществляется рефлексивно.
В строке 20 мы получаем ссылку на поле с именем “str”. Далее мы вызываем метод get, передав туда объект у которого надо получить значение поля. В строке 22 мы записываем значение через метод set, у которого первый параметр это тот объект которому нужно записать значение, а второй – то значение, которое надо записать.
В строке 24 мы получаем доступ к методу с именем printStr не имеющему параметров, и вызываем его методом invoke в строке 25. Если бы метод имел параметры, перечень их типов следовало бы указать в строке 24, а в строке 25 передать соответствующие аргументы.

15. Class<?> clazz= Class. forName ("edu. ermakov. reflect.A");
17. Constructor<?> cstrotx= clazz.getConstructor (String.class);
18. Object. objecstrotr.newinstance("Hello");
20. Field fld=clazz.getField("str");
21. String s= (String) fld.get (obj);
22. fld.set (obj, st" reflect")
24. Method m=clazz.getMethod ("printStr"); 
25. m.invoke (obj) ;
вывод: Hello reflection!


Последней типовой функциональностью рефлексии является внесение изменений в структуру класса во время исполнения кода. 
В Java такая функциональность недоступна, так как является небезопасной. Максимальной вольностью в этом смысле является разрешение использовать закрытые члены класса 
